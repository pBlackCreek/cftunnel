#!/bin/bash

# cftunnel - Cloudflare Tunnel automation script for Laravel Herd
# Usage: cftunnel share [domain] [options]

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Script configuration
CONFIG_DIR="$HOME/.cftunnel"
CONFIG_FILE="$CONFIG_DIR/config.json"

# Functions
print_success() {
    echo -e "${GREEN}✓${NC} $1" >&2
}

print_error() {
    echo -e "${RED}✗${NC} $1" >&2
}

print_info() {
    echo -e "${YELLOW}ℹ${NC} $1" >&2
}

# Check if required commands are installed
check_requirements() {
    local missing=0

    if ! command -v cloudflared &> /dev/null; then
        print_error "cloudflared is not installed. Install it with: brew install cloudflared"
        missing=1
    fi

    if ! command -v herd &> /dev/null; then
        print_error "Laravel Herd is not installed. Please install it from https://herd.laravel.com"
        missing=1
    fi

    if ! command -v jq &> /dev/null; then
        print_error "jq is not installed. Install it with: brew install jq"
        missing=1
    fi

    if [ $missing -eq 1 ]; then
        exit 1
    fi
}

# Initialize configuration
init_config() {
    if [ ! -d "$CONFIG_DIR" ]; then
        mkdir -p "$CONFIG_DIR"
    fi

    if [ ! -f "$CONFIG_FILE" ]; then
        echo '{"domain": null, "tunnels": {}}' > "$CONFIG_FILE"
    fi
}

# Set domain
set_domain() {
    local domain=$1
    
    if [ -z "$domain" ]; then
        print_error "Please specify a domain: cftunnel set-domain example.com"
        exit 1
    fi
    
    jq ".domain = \"$domain\"" "$CONFIG_FILE" > "$CONFIG_FILE.tmp" && mv "$CONFIG_FILE.tmp" "$CONFIG_FILE"
    print_success "Domain set to: $domain"
}

# Get domain
get_domain() {
    jq -r '.domain // empty' "$CONFIG_FILE"
}

# Get current directory name (sanitized for domain use)
get_current_dir_name() {
    local dir_name=$(basename "$(pwd)")
    # Convert to lowercase and replace non-alphanumeric characters with hyphens
    echo "$dir_name" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g' | sed 's/--*/-/g' | sed 's/^-\|-$//g'
}

# Generate domain from current directory and base domain
generate_domain() {
    local domain=$(get_domain)
    
    if [ -z "$domain" ]; then
        print_error "No domain configured. Set one with: cftunnel set-domain example.com"
        exit 1
    fi
    
    local subdomain=$(get_current_dir_name)
    echo "$subdomain.$domain"
}

# Show current configuration
show_config() {
    local domain=$(get_domain)
    local current_dir=$(get_current_dir_name)
    
    echo "Current configuration:"
    echo "  Domain: ${domain:-"(not set)"}"
    echo "  Current directory: $(pwd)"
    echo "  Directory name: $current_dir"
    
    if [ -n "$domain" ]; then
        echo "  Generated domain: $current_dir.$domain"
    fi
    
    echo ""
    echo "Configured tunnels:"
    if [ -f "$CONFIG_FILE" ]; then
        local tunnels=$(jq -r '.tunnels | keys[]' "$CONFIG_FILE" 2>/dev/null)
        if [ -n "$tunnels" ]; then
            echo "$tunnels" | while read -r domain; do
                local tunnel_id=$(jq -r ".tunnels[\"$domain\"].id" "$CONFIG_FILE")
                echo "  $domain -> $tunnel_id"
            done
        else
            echo "  (no tunnels configured)"
        fi
    else
        echo "  (no tunnels configured)"
    fi
}

# Find tunnel ID by domain
find_tunnel_by_domain() {
    local domain=$1

    # First check cloudflared route list to find the tunnel ID for this domain
    local route_info=$(cloudflared tunnel route list 2>&1 | grep "$domain" | head -1)

    if [ -n "$route_info" ]; then
        # Extract tunnel ID from the route info
        local tunnel_id=$(echo "$route_info" | grep -oE '[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}' | head -1)

        if [ -n "$tunnel_id" ]; then
            echo "$tunnel_id"
            return 0
        fi
    fi

    return 1
}

# Get or create tunnel for domain
get_or_create_tunnel() {
    local domain=$1
    local tunnel_name="herd-${domain//./-}"

    # Check if tunnel already exists in config
    local tunnel_id=$(jq -r ".tunnels[\"$domain\"].id // empty" "$CONFIG_FILE")

    if [ -n "$tunnel_id" ]; then
        # Verify tunnel still exists
        if cloudflared tunnel list | grep -q "$tunnel_id"; then
            print_info "Using existing tunnel for $domain"
            echo "$tunnel_id"
            return 0
        fi
    fi

    # Check if tunnel is already routed to this domain
    tunnel_id=$(find_tunnel_by_domain "$domain")
    if [ -n "$tunnel_id" ]; then
        print_info "Found existing tunnel for $domain: $tunnel_id"

        # Save to config
        jq ".tunnels[\"$domain\"] = {\"id\": \"$tunnel_id\", \"name\": \"$tunnel_name\"}" "$CONFIG_FILE" > "$CONFIG_FILE.tmp" && mv "$CONFIG_FILE.tmp" "$CONFIG_FILE"

        echo "$tunnel_id"
        return 0
    fi

    # Check if tunnel exists by name
    local existing_tunnel=$(cloudflared tunnel list | grep "$tunnel_name" | awk '{print $1}')

    if [ -n "$existing_tunnel" ]; then
        print_info "Found existing tunnel with name $tunnel_name"
        tunnel_id="$existing_tunnel"

        # Save to config
        jq ".tunnels[\"$domain\"] = {\"id\": \"$tunnel_id\", \"name\": \"$tunnel_name\"}" "$CONFIG_FILE" > "$CONFIG_FILE.tmp" && mv "$CONFIG_FILE.tmp" "$CONFIG_FILE"

        echo "$tunnel_id"
        return 0
    fi

    print_info "Creating new tunnel for $domain..."

    # Create tunnel - redirect stderr to stdout and strip ANSI colors
    local create_output=$(cloudflared tunnel create "$tunnel_name" 2>&1 | sed 's/\x1b\[[0-9;]*m//g')
    local tunnel_id=$(echo "$create_output" | grep -oE '[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}' | head -1)

    if [ -z "$tunnel_id" ]; then
        print_error "Failed to create tunnel"
        echo "$create_output" >&2
        exit 1
    fi

    # Save to config
    jq ".tunnels[\"$domain\"] = {\"id\": \"$tunnel_id\", \"name\": \"$tunnel_name\"}" "$CONFIG_FILE" > "$CONFIG_FILE.tmp" && mv "$CONFIG_FILE.tmp" "$CONFIG_FILE"

    print_success "Created tunnel: $tunnel_id"
    echo "$tunnel_id"
}

# Create tunnel configuration
create_tunnel_config() {
    local tunnel_id=$1
    local domain=$2
    local port=${3:-80}
    local protocol=${4:-http}

    local config_file="$HOME/.cloudflared/config-$domain.yml"

    cat > "$config_file" << EOF
tunnel: $tunnel_id
credentials-file: $HOME/.cloudflared/$tunnel_id.json

ingress:
  - hostname: $domain
    service: $protocol://${domain}.test:$port
  - service: http_status:404
EOF

    print_success "Created tunnel configuration"
}

# Setup DNS route
setup_dns_route() {
    local tunnel_id=$1
    local domain=$2

    # Check if route already exists
    if cloudflared tunnel route dns "$tunnel_id" "$domain" 2>&1 | grep -q "already exists"; then
        print_info "DNS route already exists for $domain"
    else
        cloudflared tunnel route dns "$tunnel_id" "$domain"
        print_success "Created DNS route for $domain"
    fi
}

# Link with Herd
link_with_herd() {
    local domain=$1
    local current_dir=$(pwd)

    # Check if already linked
    if herd links | grep -q "${domain}.test"; then
        print_info "Domain already linked with Herd"
    else
        herd link "$domain"
        print_success "Linked $domain with Herd"
    fi
}

# Start tunnel
start_tunnel() {
    local domain=$1
    local tunnel_id=$2
    local config_file="$HOME/.cloudflared/config-$domain.yml"

    print_info "Starting tunnel for $domain..."
    print_success "Your site is now accessible at: https://$domain"
    print_info "Press Ctrl+C to stop sharing"

    # Run tunnel
    cloudflared tunnel --config "$config_file" run "$tunnel_id"
}

# Stop tunnel
stop_tunnel() {
    local domain=$1
    print_info "Stopping tunnel for $domain..."
}

# List active tunnels
list_tunnels() {
    print_info "Configured tunnels:"

    if [ -f "$CONFIG_FILE" ]; then
        jq -r '.tunnels | to_entries[] | "\(.key) -> \(.value.id)"' "$CONFIG_FILE"
    else
        print_info "No tunnels configured"
    fi
}

# Remove tunnel
remove_tunnel() {
    local domain=$1

    # Get tunnel info from config
    local tunnel_id=$(jq -r ".tunnels[\"$domain\"].id // empty" "$CONFIG_FILE")
    local tunnel_name=$(jq -r ".tunnels[\"$domain\"].name // empty" "$CONFIG_FILE")

    if [ -z "$tunnel_id" ]; then
        print_error "No tunnel found for $domain"
        exit 1
    fi

    print_info "Removing tunnel for $domain..."

    # Delete tunnel
    cloudflared tunnel delete "$tunnel_id" 2>/dev/null || true

    # Remove from config
    jq "del(.tunnels[\"$domain\"])" "$CONFIG_FILE" > "$CONFIG_FILE.tmp" && mv "$CONFIG_FILE.tmp" "$CONFIG_FILE"

    # Remove config file
    rm -f "$HOME/.cloudflared/config-$domain.yml"

    print_success "Removed tunnel for $domain"
}

# Clean up corrupted config files
cleanup_config() {
    local domain=$1
    local config_file="$HOME/.cloudflared/config-$domain.yml"

    if [ -f "$config_file" ]; then
        rm -f "$config_file"
        print_info "Cleaned up corrupted config file"
    fi
}

# Main command handler
main() {
    local command=${1:-help}

    case "$command" in
        share)
            check_requirements
            init_config

            local domain=${2:-}
            
            # If no domain provided, try to generate one from current directory and domain
            if [ -z "$domain" ]; then
                domain=$(generate_domain)
                print_info "Using generated domain: $domain"
            fi

            # Ensure cloudflared is logged in
            if ! cloudflared tunnel list &> /dev/null; then
                print_info "Please log in to Cloudflare:"
                cloudflared login
            fi

            # Get or create tunnel
            local tunnel_id=$(get_or_create_tunnel "$domain")

            # Create tunnel config
            create_tunnel_config "$tunnel_id" "$domain"

            # Setup DNS
            setup_dns_route "$tunnel_id" "$domain"

            # Link with Herd
            link_with_herd "$domain"

            # Check if SSL is needed
            if [ "${3:-}" == "--secure" ]; then
                print_info "Securing site with Herd..."
                herd secure "$domain"
                create_tunnel_config "$tunnel_id" "$domain" 443 https
            fi

            # Start tunnel
            start_tunnel "$domain" "$tunnel_id"
            ;;

        set-domain)
            init_config
            set_domain "$2"
            ;;

        config)
            init_config
            show_config
            ;;

        stop)
            local domain=${2:-}
            if [ -z "$domain" ]; then
                print_error "Please specify a domain: cftunnel stop yourdomain.com"
                exit 1
            fi
            stop_tunnel "$domain"
            ;;

        list)
            init_config
            list_tunnels
            ;;

        remove)
            init_config
            local domain=${2:-}
            if [ -z "$domain" ]; then
                print_error "Please specify a domain: cftunnel remove yourdomain.com"
                exit 1
            fi
            remove_tunnel "$domain"
            ;;

        install)
            # Install script to /usr/local/bin
            if [ -w /usr/local/bin ]; then
                cp "$0" /usr/local/bin/cftunnel
                chmod +x /usr/local/bin/cftunnel
                print_success "Installed cftunnel to /usr/local/bin"
            else
                print_error "Cannot write to /usr/local/bin. Try with sudo: sudo $0 install"
                exit 1
            fi
            ;;

        cleanup)
            init_config
            local domain=${2:-}
            if [ -z "$domain" ]; then
                print_error "Please specify a domain: cftunnel cleanup yourdomain.com"
                exit 1
            fi
            cleanup_config "$domain"

            # Also remove the tunnel ID from config to force recreation
            jq "del(.tunnels[\"$domain\"])" "$CONFIG_FILE" > "$CONFIG_FILE.tmp" && mv "$CONFIG_FILE.tmp" "$CONFIG_FILE"
            print_success "Cleaned up configuration for $domain"
            ;;

        help|*)
            cat << EOF
cftunnel - Cloudflare Tunnel automation for Laravel Herd

Usage:
  cftunnel share [domain] [--secure]     Share your local site via Cloudflare tunnel
  cftunnel set-domain <domain>           Set the domain for automatic subdomain generation
  cftunnel config                        Show current configuration
  cftunnel list                          List all configured tunnels
  cftunnel remove <domain>               Remove tunnel for a domain
  cftunnel cleanup <domain>              Clean up corrupted config for a domain
  cftunnel install                       Install this script to /usr/local/bin
  cftunnel help                          Show this help message

Examples:
  cftunnel set-domain example.com        Set domain to example.com
  cftunnel share                         Share current directory at [directory-name].example.com
  cftunnel share myapp.com               Share current directory at https://myapp.com
  cftunnel share myapp.com --secure      Share with HTTPS locally (Herd secure)
  cftunnel config                        Show current configuration and generated domain
  cftunnel list                          Show all configured tunnels
  cftunnel remove myapp.com              Remove tunnel configuration
  cftunnel cleanup myapp.com             Clean up corrupted configuration

Automatic subdomain generation:
  1. Set a domain: cftunnel set-domain example.com
  2. Navigate to your project directory: cd /path/to/my-laravel-app
  3. Run: cftunnel share
  4. Your app will be available at: https://my-laravel-app.example.com

Requirements:
  - Laravel Herd
  - cloudflared (brew install cloudflared)
  - jq (brew install jq)

First time setup:
  1. Install requirements
  2. Run 'cloudflared login' to authenticate
  3. Set domain: 'cftunnel set-domain yourdomain.com'
  4. Run 'cftunnel share' from your project directory

Note: Make sure you own the domain and have access to its DNS settings in Cloudflare.
EOF
            ;;
    esac
}

# Handle Ctrl+C gracefully
trap 'echo -e "\n${YELLOW}ℹ${NC} Tunnel stopped"; exit 0' INT

# Run main function
main "$@"